services:
  # MySQL Database for User Service
  mysql:
    image: mysql:8.0.26
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ride_sharing_app_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s


  # MongoDB for Ride Request Service
  mongodb:
    image: mongo:4.4
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ride_sharing_app_net
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Redis for Driver Management Service
  redis:
    image: redis:6.2.6
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ride_sharing_app_net
    
  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:3.7.0
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - ride_sharing_app_net
  
  # Kafka
  kafka:
    image: bitnami/kafka:2.8.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CREATE_TOPICS: ${KAFKA_TOPIC}:1:1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - ride_sharing_app_net
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    
  # User Service
  user-service:
    build: ./user-service
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - ./user-service/.env
    environment:
      SQLALCHEMY_DATABASE_URI: mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql/${MYSQL_DATABASE}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "5000:5000"
    volumes:
      - ./user-service:/app
      - ./user-service/logs:/app/logs
    networks:
      - ride_sharing_app_net

  # Ride Request Service
  ride-request-service:
    build: ./ride-request-service
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    env_file:
      - ./ride-request-service/.env
    environment:
      MONGO_URI: mongodb://mongodb:27017/${MONGO_INITDB_DATABASE}
      USER_SERVICE_URL: http://user-service:5000
      SECRET_KEY: ${SECRET_KEY}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC}
    ports:
      - "5001:5001"
    volumes:
      - ./ride-request-service:/app
      - ./ride-request-service/logs:/app/logs
    networks:
      - ride_sharing_app_net

  # Driver Management Service
  driver-management-service:
    build: ./driver-management-service
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - ./driver-management-service/.env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: ${SECRET_KEY}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
    ports:
      - "5002:5002"
    volumes:
      - ./driver-management-service:/app
      - ./driver-management-service/logs:/app/logs
    networks:
      - ride_sharing_app_net

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  zookeeper_data:
  kafka_data:

networks:
  ride_sharing_app_net:
  